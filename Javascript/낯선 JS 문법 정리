f : @baealex

[-1] 자주 쓰일 것 같은 "신종 문법" !!
< map >
map은 단순한 반복문이다. 다만 전달한 함수에 맞게 처리된 개체가 담긴 배열이 반환된다. 
위 데이터에서 이름과 나이로만 구성된 오브젝트로 재구성 한다고 생각해보자.

<코드>
const newUsers = users.map(function(user) {
    return {
        name: user.name,
        age: user.age
    };
});
console.log(newUsers);

<결과>
[
  { name: '배진오', age: 24 },
  { name: '김아름', age: 24 },
  { name: '아이유', age: 26 }
]

[0] for(let x of str) <- in이 아니라 of인 것에 주의한다.
        * 배열의 경우 배열의 인덱스가 i에 할당되어 반복한다.
        * 오브젝트의 경우 키가 key에 할당되어 반복한다.
        *** in : 각 인덱스(정수) 값 출력
        *** of : 각 원소 내용 출력

[1] 오브젝트(Object)
    구조체(struct) 처럼 내부에 여러 변수를 가질 수 있고, 
    클래스(class)처럼 내부에 메소드를 포함하고 있는 형식이다. 

    JSON(JavaScript Object Notation)과 유사하지만, 엄연히 다른 개념이다.
    * Json -> 확장자도 있는 텍스트 파일
    * JavaScript Object -> JavaScript에서만 지원하는 특정 자료형

    * 또한 표기법에도 차이가 있다.

    *오브젝트 초기화 방법
    var obj = new Object();
    var obj = {};

    [JavaScript Object 문법]
    let obj = {
        name: "David"
        age: function(){
            return 10;
        }
    }

    [JSON 문법] (에러)
    {
        "name": "David",
        age: function{ <- 함수를 값으로 할당할 수 없다.
            return 10;
        }
    }

    {
        name: "David", <- 프로퍼티명은 반드시 "문자열" 이어야 한다.
        age: 10
    }


[2] 원시값 : 어떤 특성 또는 방법이 없는 값
기본 데이터 형식 : 원시 값을 갖는 데이터

객체가 아닌 기본 데이터 유형
String
number
boolean
null
undefined


[3] 1. JavaScript 내장 객체 (Built-in Object)
JavaScript 엔진이 구동되는 시점에서 바로 제공되며 JavaScript코드 어디에서든 사용이 가능하다. 
아래의 내장 객체들 외에도 많은 내장 객체들이 있다.

Global
Object
String
Number
Boolean
Date
Array
Math

[4] JS에서 프로퍼티는, 할당하면서 자동으로 생성된다.
(생성 시, 안만들어줬더라도, foo.a=1과 같이 쓰면 생성 명령도 포함 됨)
var foo={}; // foo 객체 생성.
foo.a=1; // .연산자를 이용하여 a라는 이름의 프로퍼티를 생성하면서 1이라는 값을 할당
var sum = foo.a+10; // .연산자를 이용하여 foo 객체의 a프로퍼티에 접근하여 값을 활용가능
console.log(sum);
> 11

2. 프로퍼티의 삭제
JavaScript의 프로퍼티는 undefined나 null을 할당한다고 삭제되지 않기 때문에 
반드시 delete라는 keyword를 사용하여 프로퍼티를 삭제해주어야 한다.
ex) delete person.age;

[5] 파이썬과 다른 for문 list 인덱싱
var arr = [10, 20, 30, 40, 50];
for (var i in arr) {
    console.log(i);
}
0
1
2
3
4

[6] 배열 원소 / 인덱스 한번에 출력 for 문

of의 경우에는 배열의 값이 i에 할당되어 반복이 진행된다. 혹은 forEach나 map을 이용하여 
같은 작업을 수행할 수 있다.

var arr = [10, 20, 30, 40, 50];

arr.forEach((value, idx) => {
    console.log(idx, value);
});

arr.map((value, idx) => {
    console.log(idx, value);
});
둘다 똑같이 아래의 결과를 출력한다.

0 10
1 20
2 30
3 40
4 50

속도는 forEach가 빠르다고 알려져있다. map은 함수형 프로그래밍에 사용되는 개념으로 
forEach와 달리 새로운 객체를 반환한다는 차이가 있다.

[7] 문자열
문자열은 가장 기본적인 구조인데 이렇게 뒤에 있는 이유는 
알아둬야 할 "중요한" 함수들이 많아서 이다. 
그 중에도 중요한 것만 기록할 예정이다.

var welcome = "ONDE Planet is the most peaceful space in the universe";

console.log(welcome.charAt(0));
// charAt(n) : n번째 문자를 출력한다. 결과는 O

console.log(welcome.charCodeAt(0));
// charCodeAt(n) : n번째 문자의 유니코드를 출력한다. 결과는 79

console.log(welcome.indexOf("x"));
// indexOf("?") : ?라는 글자가 있다면 글자의 인덱스를, 없다면 false(-1)을 출력한다. 결과는 -1

console.log(welcome.includes("space"));
// includes("?") : ?라는 글자가 있다면 true(0), 없다면 false(-1)을 출력한다. 결과는 0

console.log(welcome.replace("peaceful", "nasty"));
// replace("a", "b") : a를 b로 교체한다. 결과는 ONDE Planet is the most nasty space in the universe.

console.log(welcome.search("universe"));
// search("?") : ?라는 글자를 검색하여 첫 문자의 시작 지점을 알려준다. 결과는 46

console.log(welcome.slice(0,4));
// slice(n, n') : n~n'-1 까지의 문자를 가져온다. 결과는 ONDE

console.log(welcome.split(" "));
// split("?") : ?라는 문자를 기준으로 문자열을 분리한다. 결과는 ONDE,Planet,is,the,most,peaceful...

console.log(welcome.trim());
// trim() : 앞, 뒤의 공백을 제거하는 역할을 한다. 이 값에서는 앞뒤에 공백이 없으므로 결과가 본래의 문자열과 동일하다.

console.log(welcome.length);
// length : 문자열의 길이를 반환한다. 결과는 55

[9] 형변환 *크롤링 핵심 개념*
// Number -> String
var num = 2018;
var str = String(num); // "2018"
var str = num.toString(); // "2018"

// String -> Num
var str = "2018.08";
var mInt = Number(str); // 2018
var mInt = parseInt(str); // 2018
var mFloat = parseFloat(str); // 2018.08

// Object -> String
var user = {
    name: '배진오',
    age: 24,
};
console.log(user); // { name: '배진오', age: 24 }

var strUser = JSON.stringify(user); // 문자열 JSON
console.log(strUser); // "{\"name\":\"배진오\",\"age\":24}"

var strUserToObject = JSON.parse(strUser);
// JSON 형식의 문자열이면 parse를 이용해서 Object로 변환할 수 있음